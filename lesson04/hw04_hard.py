import re
from functools import reduce


# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
# matrix = [[1, 0, 8],
#          [3, 4, 1],
#         [0, 4, 2]]

# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку

# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
# number = """
# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 370172427121883998797908792274921901699720888093776
# 365727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 324219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450"""

# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.


def first(matr):
    rotate_matrix = list(map(list, zip(*matr)))
    return rotate_matrix


def second(ln):
    s = []
    tmp_ln = [int(i) for i in re.findall(r'\d', ln)]
    for i in range(0, len(tmp_ln) - 4):
        s.append(reduce(lambda a, x: a * x, tmp_ln[i: i + 5]))

    print(s)
    print("Максимальное произведение чисел = {}, первый индекс числа = {}".format(max(s), s.index(max(s))))


def third():
    n = 8
    x = []
    y = []
    i = 0
    while i < 8:
        try:
            print("Введите ячейку {} ферзя через пробел".format(i + 1))
            new_x, new_y = [int(s) for s in input().split()]

            if new_x < 0 or new_x > 8 or new_y < 0 or new_y > 8:
                raise ValueError

        except ValueError:
            print("Введено неверное значение")

        else:
            x.append(new_x)
            y.append(new_y)
            i += 1

    correct = True

    for i in range(n):
        for j in range(i + 1, n):
            if x[i] == x[j] or y[i] == y[j] or abs(x[i] - x[j]) == abs(y[i] - y[j]):
                correct = False

    if correct:
        print('NO')
    else:
        print('YES')


if __name__ == "__main__":
    matrix = [[1, 0, 8],
              [3, 4, 1],
              [0, 4, 2]]

    print(first(matrix))

    ln = "73167176531330624919225119674426574742355349194934969835203127745063262395783180169848018694788518438586156" \
         "0789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044" \
         "52445231617318564030987111217223831136222989342338030813533627661428280644448664523874930358907296290491" \
         "5604407723907138105158593079608667017242712188399879790879227492190169972088809377665727333001053367881220" \
         "2354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290" \
         "86256932197846862248283972241375657056057490261407972968652414535100474821663704844031998900088952434506585" \
         "4122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426" \
         "0769004224219022671055626321111109370544217506941658960408071984038509624554443629812309878799272442849091" \
         "88845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571" \
         "636269561882670428252483600823257530420752963450 "
    second(ln)

    third()
